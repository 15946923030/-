
#include<stdio.h>
#include <stdlib.h>
#include<time.h>
#include<queue>
#include<string>
#include <set>


using namespace std;

bool YiMian(Mofang M, int a, int b, int c, int d);
bool well(Mofang M);
int countWall(Mofang M);
Mofang rotate(Mofang M, int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, bool Direction);
Mofang U(Mofang M);
Mofang U_(Mofang M);
Mofang R(Mofang M);
Mofang R_(Mofang M);
Mofang F(Mofang M);
Mofang F_(Mofang M);
void showMofang(Mofang M);
struct Mofang{
	int A[24];
	string Total;
	int count;
}C;




bool YiMian(Mofang C, int a, int b, int c, int d){
	if (C.A[a] == C.A[b] && C.A[a] == C.A[c] && C.A[a] == C.A[d]) return true;
	return false;
}
bool well(Mofang C){
	if (
		YiMian(C, 0, 1, 2, 3)
		&& YiMian(C, 4, 5, 12, 13)
		&& YiMian(C, 6, 7, 14, 15)
		&& YiMian(C, 8, 9, 16, 17)
		&& YiMian(C, 10, 11, 18, 19)
		&& YiMian(C, 20, 21, 22, 23))     return true;
	return false;
}
int countWall(Mofang C){
	return YiMian(C, 0, 1, 2, 3)
		+ YiMian(C, 4, 5, 12, 13)
		+ YiMian(C, 6, 7, 14, 15)
		+ YiMian(C, 8, 9, 16, 17)
		+ YiMian(C, 10, 11, 18, 19)
		+ YiMian(C, 20, 21, 22, 23);
}
Mofang rotate(Mofang C, int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, bool Direction){
	if (Direction){//顺时针
		//面
		int t = C.A[a];
		C.A[a] = C.A[d];
		C.A[d] = C.A[c];
		C.A[c] = C.A[b];
		C.A[b] = t;
		//环
		int t1 = C.A[e], t2 = C.A[f];
		C.A[e] = C.A[k]; C.A[f] = C.A[l];
		C.A[k] = C.A[i]; C.A[l] = C.A[j];
		C.A[i] = C.A[g]; C.A[j] = C.A[h];
		C.A[g] = t1; C.A[h] = t2;
	}
	else{//逆时针
		//面
		int t = C.A[a];
		C.A[a] = C.A[b];
		C.A[b] = C.A[c];
		C.A[c] = C.A[d];
		C.A[d] = t;
		//环
		int t1 = C.A[e], t2 = C.A[f];
		C.A[e] = C.A[g]; C.A[f] = C.A[h];
		C.A[g] = C.A[i]; C.A[h] = C.A[j];
		C.A[i] = C.A[k]; C.A[j] = C.A[l];
		C.A[k] = t1; C.A[l] = t2;
	}
	return C;
}
Mofang U(Mofang C){
	return rotate(C, 0, 1, 3, 2, 5, 4, 11, 10, 9, 8, 7, 6, 1);
}
Mofang U_(Mofang C){
	return rotate(C, 0, 1, 3, 2, 5, 4, 11, 10, 9, 8, 7, 6, 0);
}
Mofang R(Mofang C){
	return rotate(C, 8, 9, 17, 16, 15, 7, 3, 1, 10, 18, 23, 21, 1);
}
Mofang R_(Mofang C){
	return rotate(C, 8, 9, 17, 16, 15, 7, 3, 1, 10, 18, 23, 21, 0);
}
Mofang F(Mofang C){
	return rotate(C, 6, 7, 15, 14, 13, 5, 2, 3, 8, 16, 21, 20, 1);
}
Mofang F_(Mofang C){
	return rotate(C, 6, 7, 15, 14, 13, 5, 2, 3, 8, 16, 21, 20, 0);
}


Mofang creatMofang(){
	Mofang C;
	C.A[0] = 0; C.A[1] = 0; C.A[2] = 0; C.A[3] = 0;
	C.A[4] = 1; C.A[5] = 1; C.A[12] = 1; C.A[13] = 1;
	C.A[6] = 2; C.A[7] = 2; C.A[14] = 2; C.A[15] = 2;
	C.A[8] = 3; C.A[9] = 3; C.A[16] = 3; C.A[17] = 3;
	C.A[10] = 4; C.A[11] = 4; C.A[18] = 4; C.A[19] = 4;
	C.A[20] = 5; C.A[21] = 5; C.A[22] = 5; C.A[23] = 5;
	C.Total.clear();
	int count = rand() % 50;
	for (int i = 0; i < count; i++){
		int rotate = rand() % 6;
		switch (rotate)
		{
		case 0:C = U(C);
			break;
		case 1:C = U_(C);
			break;
		case 2:C = R(C);
			break;
		case 3:C = R_(C);
			break;
		case 4:C = F(C);
			break;
		case 5:C = F_(C);
			break;
		}
	}
	printf("\n");

	showMofang(C);
	return C;
}

//bfs
Mofang bfs_Button(Mofang C){
	queue<Mofang>q;
	q.push(C);
	Mofang C1, C2;
	C1 = q.front();
	while (!q.empty()){
		q.pop();
	}
}

int main()
{
	srand((unsigned int)time(0));
	Mofang C = creatMofang();

	while (1);
	return 0;
}
